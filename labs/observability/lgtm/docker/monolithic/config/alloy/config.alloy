discovery.docker "containers" {
    host                = "unix:///var/run/docker.sock"
    refresh_interval    = "5s"
}

prometheus.scrape "containers" {
    targets         = discovery.docker.containers.targets
    forward_to      = [prometheus.remote_write.default.receiver]
}

// configure to send metrics to mimir
prometheus.remote_write "default" {
    endpoint {
        url     = "http://mimir:3100/api/v1/push"
        headers = {
            "X-Scope-OrgID" = "tenant1",
        }
    }
}

discovery.relabel "containers" {
	targets = []

	rule {
		source_labels = ["__meta_docker_container_name"]
		regex         = "/(.*)"
		target_label  = "container"
	}
}

loki.source.docker "containers" {
	host             = "unix:///var/run/docker.sock"
	targets          = discovery.docker.containers.targets
	forward_to       = [loki.write.default.receiver]
	relabel_rules    = discovery.relabel.containers.rules
	refresh_interval = "5s"
}

// configure to send logs to loki
loki.write "default" {
	endpoint {
		url       = "http://loki:3100/loki/api/v1/push"
		tenant_id = "tenant1"
	}
	external_labels = {}
}

// enable tracing pipeline
tracing {
    // Write all spans (this setting sets the sampling rate to 1, which means all data).
    // Don't use this value in production.
    sampling_fraction = 1.0
    write_to          = [otelcol.exporter.otlp.alloy.input]
}

otelcol.exporter.otlp "alloy" {
    client {
        endpoint = coalesce(sys.env("ALLOY_HOST"), "localhost:4320")
        tls {
            insecure                = true
            insecure_skip_verify    = true
        }
    }
}

otelcol.receiver.otlp "default" {
    grpc {
        endpoint = "0.0.0.0:4320"
    }

    output {
        traces = [otelcol.connector.servicegraph.default.input,otelcol.exporter.otlp.tempo.input]
    }
}

otelcol.connector.servicegraph "default" {
    dimensions = ["http.method", "http.target"]
    output {
        metrics = [otelcol.exporter.prometheus.default.input]
    }
}

otelcol.exporter.prometheus "default" {
    forward_to = [prometheus.remote_write.default.receiver]
}

otelcol.exporter.otlp "tempo" {
    client {
        endpoint = coalesce(sys.env("TEMPO_HOST"), "localhost:4317")
        headers = {
            "X-Scope-OrgID" = "tenant1",
        }
        tls {
            insecure                = true
            insecure_skip_verify    = true
        }
    }
}
